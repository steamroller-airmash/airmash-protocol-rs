
use serde_am::*;
use error::Error;

const COUNTRY_CODES: [Option<&'static str>; 126] = [
    None, 
    Some("SY"), 
    Some("TH"), 
    Some("TM"), 
    Some("TN"), 
    Some("TR"), 
    Some("TT"), 
    Some("TW"), 
    Some("TZ"), 
    Some("UA"), 
    Some("UN"), 
    Some("US"), 
    Some("UY"), 
    Some("UZ"), 
    Some("VE"), 
    Some("VN"), 
    Some("PR"), 
    Some("PT"), 
    Some("PY"), 
    Some("QA"), 
    Some("rainbow"), 
    Some("RO"), 
    Some("RS"), 
    Some("RU"), 
    Some("SA"), 
    Some("SE"), 
    Some("SG"), 
    Some("SI"), 
    Some("SK"), 
    Some("SM"), 
    Some("MK"), 
    Some("MO"), 
    Some("MT"), 
    Some("MX"), 
    Some("MY"), 
    Some("NG"), 
    Some("NL"), 
    Some("NO"), 
    Some("NP"), 
    Some("NZ"), 
    Some("OM"), 
    Some("PA"), 
    Some("PE"), 
    Some("JP"), 
    Some("KP"), 
    Some("KR"), 
    Some("KW"), 
    Some("KZ"), 
    Some("LB"), 
    Some("LI"), 
    Some("LK"), 
    Some("LT"), 
    Some("LU"), 
    Some("LV"), 
    Some("HN"), 
    Some("HR"), 
    Some("HU"), 
    Some("ID"), 
    Some("IE"), 
    Some("IL"), 
    Some("IM"), 
    Some("imperial"), 
    Some("IN"), 
    Some("IQ"), 
    Some("DE"), 
    Some("DK"), 
    Some("DO"), 
    Some("DZ"), 
    Some("EC"), 
    Some("EE"), 
    Some("EG"), 
    Some("ES"), 
    Some("EU"), 
    Some("BH"), 
    Some("BO"), 
    Some("BR"), 
    Some("BT"), 
    Some("BY"), 
    Some("CA"), 
    Some("CH"), 
    Some("AD"), 
    Some("AE"), 
    Some("AL"), 
    Some("AM"), 
    Some("CL"), 
    Some("AQ"), 
    Some("CN"), 
    Some("AR"), 
    Some("FI"), 
    Some("CO"), 
    Some("AT"), 
    Some("IR"), 
    Some("FR"), 
    Some("communist"), 
    Some("AU"), 
    Some("LY"), 
    Some("IS"), 
    Some("GB"), 
    Some("confederate"), 
    Some("AZ"), 
    Some("MA"), 
    Some("IT"), 
    Some("GE"), 
    Some("CR"), 
    Some("BA"), 
    Some("PH"), 
    Some("MC"), 
    Some("JM"), 
    Some("GR"), 
    Some("CU"), 
    Some("BD"), 
    Some("SO"), 
    Some("PK"), 
    Some("MD"), 
    Some("JO"), 
    Some("GT"), 
    Some("CY"), 
    Some("BE"), 
    Some("ZA"), 
    Some("SV"), 
    Some("PL"), 
    Some("ME"), 
    Some("jolly"), 
    Some("HK"), 
    Some("CZ"), 
    Some("BG")
];

// Pull in the PHF table
include!(concat!(env!("OUT_DIR"), "/flags-phf.rs"));

/// All the current flags present within the airmash
/// server.
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
#[cfg_attr(feature="serde", derive(Serialize, Deserialize))]
pub enum FlagCode {
	SyrianArabRepublic,
	Thailand,
	Turkmenistan,
	Tunisia,
	Turkey,
	TrinidadandTobago,
	Taiwan,
	Tanzania,
	Ukraine,
	UnitedNations,
	UnitedStates,
	Uruguay,
	Uzbekistan,
	Venezuela,
	VietNam,
	PuertoRico,
	Portugal,
	Paraguay,
	Qatar,
	Rainbow,
	Romania,
	Serbia,
	RussianFederation,
	SaudiArabia,
	Sweden,
	Singapore,
	Slovenia,
	Slovakia,
	SanMarino,
	Macedonia,
	Macao,
	Malta,
	Mexico,
	Malaysia,
	Nigeria,
	Netherlands,
	Norway,
	Nepal,
	NewZealand,
	Oman,
	Panama,
	Peru,
	Japan,
	DPRK,
	SouthKorea,
	Kuwait,
	Kazakhstan,
	Lebanon,
	Liechtenstein,
	SriLanka,
	Lithuania,
	Luxembourg,
	Latvia,
	Honduras,
	Croatia,
	Hungary,
	Indonesia,
	Ireland,
	Israel,
	IsleofMan,
	ImperialJapan,
	India,
	Iraq,
	Germany,
	Denmark,
	DominicanRepublic,
	Algeria,
	Ecuador,
	Estonia,
	Egypt,
	Spain,
	EuropeanUnion,
	Bahrain,
	Bolivia,
	Brazil,
	Bhutan,
	Belarus,
	Canada,
	Switzerland,
	Andorra,
	UnitedArabEmirates,
	Albania,
	Armenia,
	Chile,
	Antarctica,
	China,
	Argentina,
	Finland,
	Colombia,
	Austria,
	Iran,
	France,
	Communist,
	Australia,
	LibyanArabJamahiriya,
	Iceland,
	UnitedKingdom,
	Confederate,
	Azerbaijan,
	Morocco,
	Italy,
	Georgia,
	CostaRica,
	BosniaandHerzegovina,
	Philippines,
	Monaco,
	Jamaica,
	Greece,
	Cuba,
	Bangladesh,
	Somalia,
	Pakistan,
	Moldova,
	Jordan,
	Guatemala,
	Cyprus,
	Belgium,
	SouthAfrica,
	ElSalvador,
	Poland,
	Montenegro,
	JollyRogers,
	HongKong,
	CzechRepublic,
	Bulgaria
}

impl FlagCode {
    /// Returns the numeric value that corresponds 
    /// to the flag code. 
    /// 
    /// This is the value that is actually sent
    /// in the serialized packet and is used 
    /// in the client.
    /// 
    /// Credit to Bombita for determining the 
    /// flag -> number mapping. Sources 
    /// [here](https://gist.github.com/Molesmalo/5e6d51aef8558e193720c3d963aeb5b7).
    pub fn to_u16(self) -> u16 {
        match self {
            FlagCode::SyrianArabRepublic => 1,
            FlagCode::Thailand => 2,
            FlagCode::Turkmenistan => 3,
            FlagCode::Tunisia => 4,
            FlagCode::Turkey => 5,
            FlagCode::TrinidadandTobago => 6,
            FlagCode::Taiwan => 7,
            FlagCode::Tanzania => 8,
            FlagCode::Ukraine => 9,
            FlagCode::UnitedNations => 10,
            FlagCode::UnitedStates => 11,
            FlagCode::Uruguay => 12,
            FlagCode::Uzbekistan => 13,
            FlagCode::Venezuela => 14,
            FlagCode::VietNam => 15,
            FlagCode::PuertoRico => 16,
            FlagCode::Portugal => 17,
            FlagCode::Paraguay => 18,
            FlagCode::Qatar => 19,
            FlagCode::Rainbow => 20,
            FlagCode::Romania => 21,
            FlagCode::Serbia => 22,
            FlagCode::RussianFederation => 23,
            FlagCode::SaudiArabia => 24,
            FlagCode::Sweden => 25,
            FlagCode::Singapore => 26,
            FlagCode::Slovenia => 27,
            FlagCode::Slovakia => 28,
            FlagCode::SanMarino => 29,
            FlagCode::Macedonia => 30,
            FlagCode::Macao => 31,
            FlagCode::Malta => 32,
            FlagCode::Mexico => 33,
            FlagCode::Malaysia => 34,
            FlagCode::Nigeria => 35,
            FlagCode::Netherlands => 36,
            FlagCode::Norway => 37,
            FlagCode::Nepal => 38,
            FlagCode::NewZealand => 39,
            FlagCode::Oman => 40,
            FlagCode::Panama => 41,
            FlagCode::Peru => 42,
            FlagCode::Japan => 43,
            FlagCode::DPRK => 44,
            FlagCode::SouthKorea => 45,
            FlagCode::Kuwait => 46,
            FlagCode::Kazakhstan => 47,
            FlagCode::Lebanon => 48,
            FlagCode::Liechtenstein => 49,
            FlagCode::SriLanka => 50,
            FlagCode::Lithuania => 51,
            FlagCode::Luxembourg => 52,
            FlagCode::Latvia => 53,
            FlagCode::Honduras => 54,
            FlagCode::Croatia => 55,
            FlagCode::Hungary => 56,
            FlagCode::Indonesia => 57,
            FlagCode::Ireland => 58,
            FlagCode::Israel => 59,
            FlagCode::IsleofMan => 60,
            FlagCode::ImperialJapan => 61,
            FlagCode::India => 62,
            FlagCode::Iraq => 63,
            FlagCode::Germany => 64,
            FlagCode::Denmark => 65,
            FlagCode::DominicanRepublic => 66,
            FlagCode::Algeria => 67,
            FlagCode::Ecuador => 68,
            FlagCode::Estonia => 69,
            FlagCode::Egypt => 70,
            FlagCode::Spain => 71,
            FlagCode::EuropeanUnion => 72,
            FlagCode::Bahrain => 73,
            FlagCode::Bolivia => 74,
            FlagCode::Brazil => 75,
            FlagCode::Bhutan => 76,
            FlagCode::Belarus => 77,
            FlagCode::Canada => 78,
            FlagCode::Switzerland => 79,
            FlagCode::Andorra => 80,
            FlagCode::UnitedArabEmirates => 81,
            FlagCode::Albania => 82,
            FlagCode::Armenia => 83,
            FlagCode::Chile => 84,
            FlagCode::Antarctica => 85,
            FlagCode::China => 86,
            FlagCode::Argentina => 87,
            FlagCode::Finland => 88,
            FlagCode::Colombia => 89,
            FlagCode::Austria => 90,
            FlagCode::Iran => 91,
            FlagCode::France => 92,
            FlagCode::Communist => 93,
            FlagCode::Australia => 94,
            FlagCode::LibyanArabJamahiriya => 95,
            FlagCode::Iceland => 96,
            FlagCode::UnitedKingdom => 97,
            FlagCode::Confederate => 98,
            FlagCode::Azerbaijan => 99,
            FlagCode::Morocco => 100,
            FlagCode::Italy => 101,
            FlagCode::Georgia => 102,
            FlagCode::CostaRica => 103,
            FlagCode::BosniaandHerzegovina => 104,
            FlagCode::Philippines => 105,
            FlagCode::Monaco => 106,
            FlagCode::Jamaica => 107,
            FlagCode::Greece => 108,
            FlagCode::Cuba => 109,
            FlagCode::Bangladesh => 110,
            FlagCode::Somalia => 111,
            FlagCode::Pakistan => 112,
            FlagCode::Moldova => 113,
            FlagCode::Jordan => 114,
            FlagCode::Guatemala => 115,
            FlagCode::Cyprus => 116,
            FlagCode::Belgium => 117,
            FlagCode::SouthAfrica => 118,
            FlagCode::ElSalvador => 119,
            FlagCode::Poland => 120,
            FlagCode::Montenegro => 121,
            FlagCode::JollyRogers => 122,
            FlagCode::HongKong => 123,
            FlagCode::CzechRepublic => 124,
            FlagCode::Bulgaria => 125
        } 
    }

    /// Return the flag code that corresponds to 
    /// the numeric value, or `None` if there 
    /// is no corresponding flag.
    /// 
    /// Credit to Bombita for determining the 
    /// flag -> number mapping. Sources 
    /// [here](https://gist.github.com/Molesmalo/5e6d51aef8558e193720c3d963aeb5b7).
    pub fn from_u16(v: u16) -> Option<FlagCode> {
        Some(match v {
            1 => FlagCode::SyrianArabRepublic,
            2 => FlagCode::Thailand,
            3 => FlagCode::Turkmenistan,
            4 => FlagCode::Tunisia,
            5 => FlagCode::Turkey,
            6 => FlagCode::TrinidadandTobago,
            7 => FlagCode::Taiwan,
            8 => FlagCode::Tanzania,
            9 => FlagCode::Ukraine,
            10 => FlagCode::UnitedNations,
            11 => FlagCode::UnitedStates,
            12 => FlagCode::Uruguay,
            13 => FlagCode::Uzbekistan,
            14 => FlagCode::Venezuela,
            15 => FlagCode::VietNam,
            16 => FlagCode::PuertoRico,
            17 => FlagCode::Portugal,
            18 => FlagCode::Paraguay,
            19 => FlagCode::Qatar,
            20 => FlagCode::Rainbow,
            21 => FlagCode::Romania,
            22 => FlagCode::Serbia,
            23 => FlagCode::RussianFederation,
            24 => FlagCode::SaudiArabia,
            25 => FlagCode::Sweden,
            26 => FlagCode::Singapore,
            27 => FlagCode::Slovenia,
            28 => FlagCode::Slovakia,
            29 => FlagCode::SanMarino,
            30 => FlagCode::Macedonia,
            31 => FlagCode::Macao,
            32 => FlagCode::Malta,
            33 => FlagCode::Mexico,
            34 => FlagCode::Malaysia,
            35 => FlagCode::Nigeria,
            36 => FlagCode::Netherlands,
            37 => FlagCode::Norway,
            38 => FlagCode::Nepal,
            39 => FlagCode::NewZealand,
            40 => FlagCode::Oman,
            41 => FlagCode::Panama,
            42 => FlagCode::Peru,
            43 => FlagCode::Japan,
            44 => FlagCode::DPRK,
            45 => FlagCode::SouthKorea,
            46 => FlagCode::Kuwait,
            47 => FlagCode::Kazakhstan,
            48 => FlagCode::Lebanon,
            49 => FlagCode::Liechtenstein,
            50 => FlagCode::SriLanka,
            51 => FlagCode::Lithuania,
            52 => FlagCode::Luxembourg,
            53 => FlagCode::Latvia,
            54 => FlagCode::Honduras,
            55 => FlagCode::Croatia,
            56 => FlagCode::Hungary,
            57 => FlagCode::Indonesia,
            58 => FlagCode::Ireland,
            59 => FlagCode::Israel,
            60 => FlagCode::IsleofMan,
            61 => FlagCode::ImperialJapan,
            62 => FlagCode::India,
            63 => FlagCode::Iraq,
            64 => FlagCode::Germany,
            65 => FlagCode::Denmark,
            66 => FlagCode::DominicanRepublic,
            67 => FlagCode::Algeria,
            68 => FlagCode::Ecuador,
            69 => FlagCode::Estonia,
            70 => FlagCode::Egypt,
            71 => FlagCode::Spain,
            72 => FlagCode::EuropeanUnion,
            73 => FlagCode::Bahrain,
            74 => FlagCode::Bolivia,
            75 => FlagCode::Brazil,
            76 => FlagCode::Bhutan,
            77 => FlagCode::Belarus,
            78 => FlagCode::Canada,
            79 => FlagCode::Switzerland,
            80 => FlagCode::Andorra,
            81 => FlagCode::UnitedArabEmirates,
            82 => FlagCode::Albania,
            83 => FlagCode::Armenia,
            84 => FlagCode::Chile,
            85 => FlagCode::Antarctica,
            86 => FlagCode::China,
            87 => FlagCode::Argentina,
            88 => FlagCode::Finland,
            89 => FlagCode::Colombia,
            90 => FlagCode::Austria,
            91 => FlagCode::Iran,
            92 => FlagCode::France,
            93 => FlagCode::Communist,
            94 => FlagCode::Australia,
            95 => FlagCode::LibyanArabJamahiriya,
            96 => FlagCode::Iceland,
            97 => FlagCode::UnitedKingdom,
            98 => FlagCode::Confederate,
            99 => FlagCode::Azerbaijan,
            100 => FlagCode::Morocco,
            101 => FlagCode::Italy,
            102 => FlagCode::Georgia,
            103 => FlagCode::CostaRica,
            104 => FlagCode::BosniaandHerzegovina,
            105 => FlagCode::Philippines,
            106 => FlagCode::Monaco,
            107 => FlagCode::Jamaica,
            108 => FlagCode::Greece,
            109 => FlagCode::Cuba,
            110 => FlagCode::Bangladesh,
            111 => FlagCode::Somalia,
            112 => FlagCode::Pakistan,
            113 => FlagCode::Moldova,
            114 => FlagCode::Jordan,
            115 => FlagCode::Guatemala,
            116 => FlagCode::Cyprus,
            117 => FlagCode::Belgium,
            118 => FlagCode::SouthAfrica,
            119 => FlagCode::ElSalvador,
            120 => FlagCode::Poland,
            121 => FlagCode::Montenegro,
            122 => FlagCode::JollyRogers,
            123 => FlagCode::HongKong,
            124 => FlagCode::CzechRepublic,
            125 => FlagCode::Bulgaria,
            _ => return None
        })
    }

    /// Get the ISO-2 code associated with
    /// the flag (or special codes for non-country 
    /// flags)
    pub fn to_str(self) -> &'static str {
        COUNTRY_CODES[self.to_u16() as usize].unwrap()
    }

    /// Get the flag code associated with an
    /// ISO-2 country code. (or special codes
    /// for non-country flags).
    pub fn from_str(v: &str) -> Option<Self> {
        FLAG_MAP.get::<str>(&v.to_uppercase()).map(|x| *x)
    }
}

impl Serialize for FlagCode {
    fn serialize(&self, ser: &mut Serializer) -> Result<()> {
        ser.serialize_u16(self.to_u16())
    }
}

impl<'de> Deserialize<'de> for FlagCode {
    fn deserialize(de: &mut Deserializer<'de>) -> Result<Self> {
        let ival = de.deserialize_u16()?;
        match Self::from_u16(ival) {
            Some(v) => Ok(v),
            None => Err(Error::InvalidFlag(ival))
        }
    }
}
